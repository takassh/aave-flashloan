/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { V3FlashLoan, V3FlashLoanInterface } from "../V3FlashLoan";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "ADDRESSES_PROVIDER",
    outputs: [
      {
        internalType: "contract IPoolAddressesProvider",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "POOL",
    outputs: [
      {
        internalType: "contract IPool",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "asset",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "premium",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "initiator",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "params",
        type: "bytes",
      },
    ],
    name: "executeOperation",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_asset",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "myFlashLoanCall",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60c060405234801561001057600080fd5b5073a55125a90d75a95ec00130e8e8c197db5641eb1973ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff168152505060805173ffffffffffffffffffffffffffffffffffffffff1663026b1d5f6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156100a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100ca9190610165565b73ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff1681525050610192565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061013282610107565b9050919050565b61014281610127565b811461014d57600080fd5b50565b60008151905061015f81610139565b92915050565b60006020828403121561017b5761017a610102565b5b600061018984828501610150565b91505092915050565b60805160a0516107716101c560003960008181610100015281816101f401526102860152600061019c01526107716000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806302ec11b3146100515780630542975c1461006d5780631b11d0ff1461008b5780637535d246146100bb575b600080fd5b61006b60048036038101906100669190610360565b6100d9565b005b61007561019a565b60405161008291906103ff565b60405180910390f35b6100a560048036038101906100a0919061047f565b6101be565b6040516100b29190610534565b60405180910390f35b6100c3610284565b6040516100d09190610570565b60405180910390f35b600030905060008390506000839050600060405180602001604052806000815250905060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166342b0b77c86868686866040518663ffffffff1660e01b815260040161015f95949392919061065f565b600060405180830381600087803b15801561017957600080fd5b505af115801561018d573d6000803e3d6000fd5b5050505050505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000806101d486886102a890919063ffffffff16565b90508773ffffffffffffffffffffffffffffffffffffffff1663095ea7b37f0000000000000000000000000000000000000000000000000000000000000000836040518363ffffffff1660e01b81526004016102319291906106b9565b6020604051808303816000875af1158015610250573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610274919061070e565b5060019150509695505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60008282840191508110156102bc57600080fd5b92915050565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006102f7826102cc565b9050919050565b610307816102ec565b811461031257600080fd5b50565b600081359050610324816102fe565b92915050565b6000819050919050565b61033d8161032a565b811461034857600080fd5b50565b60008135905061035a81610334565b92915050565b60008060408385031215610377576103766102c2565b5b600061038585828601610315565b92505060206103968582860161034b565b9150509250929050565b6000819050919050565b60006103c56103c06103bb846102cc565b6103a0565b6102cc565b9050919050565b60006103d7826103aa565b9050919050565b60006103e9826103cc565b9050919050565b6103f9816103de565b82525050565b600060208201905061041460008301846103f0565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f84011261043f5761043e61041a565b5b8235905067ffffffffffffffff81111561045c5761045b61041f565b5b60208301915083600182028301111561047857610477610424565b5b9250929050565b60008060008060008060a0878903121561049c5761049b6102c2565b5b60006104aa89828a01610315565b96505060206104bb89828a0161034b565b95505060406104cc89828a0161034b565b94505060606104dd89828a01610315565b935050608087013567ffffffffffffffff8111156104fe576104fd6102c7565b5b61050a89828a01610429565b92509250509295509295509295565b60008115159050919050565b61052e81610519565b82525050565b60006020820190506105496000830184610525565b92915050565b600061055a826103cc565b9050919050565b61056a8161054f565b82525050565b60006020820190506105856000830184610561565b92915050565b610594816102ec565b82525050565b6105a38161032a565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b838110156105e35780820151818401526020810190506105c8565b838111156105f2576000848401525b50505050565b6000601f19601f8301169050919050565b6000610614826105a9565b61061e81856105b4565b935061062e8185602086016105c5565b610637816105f8565b840191505092915050565b600061ffff82169050919050565b61065981610642565b82525050565b600060a082019050610674600083018861058b565b610681602083018761058b565b61068e604083018661059a565b81810360608301526106a08185610609565b90506106af6080830184610650565b9695505050505050565b60006040820190506106ce600083018561058b565b6106db602083018461059a565b9392505050565b6106eb81610519565b81146106f657600080fd5b50565b600081519050610708816106e2565b92915050565b600060208284031215610724576107236102c2565b5b6000610732848285016106f9565b9150509291505056fea26469706673582212201f78f4a035952451539f7f23bbaf8105a9f5f43323776985ed52e67b9dce819664736f6c634300080a0033";

type V3FlashLoanConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: V3FlashLoanConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class V3FlashLoan__factory extends ContractFactory {
  constructor(...args: V3FlashLoanConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "V3FlashLoan";
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<V3FlashLoan> {
    return super.deploy(overrides || {}) as Promise<V3FlashLoan>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): V3FlashLoan {
    return super.attach(address) as V3FlashLoan;
  }
  connect(signer: Signer): V3FlashLoan__factory {
    return super.connect(signer) as V3FlashLoan__factory;
  }
  static readonly contractName: "V3FlashLoan";
  public readonly contractName: "V3FlashLoan";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): V3FlashLoanInterface {
    return new utils.Interface(_abi) as V3FlashLoanInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): V3FlashLoan {
    return new Contract(address, _abi, signerOrProvider) as V3FlashLoan;
  }
}
