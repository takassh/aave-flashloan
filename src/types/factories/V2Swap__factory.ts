/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { V2Swap, V2SwapInterface } from "../V2Swap";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "router",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amountIn",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
    ],
    name: "swapExactInputSingle",
    outputs: [
      {
        internalType: "uint256",
        name: "amountOut",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amountOut",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amountInMaximum",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
    ],
    name: "swapExactOutputSingle",
    outputs: [
      {
        internalType: "uint256",
        name: "amountIn",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "swapRouter",
    outputs: [
      {
        internalType: "contract IUniswapV2Router02",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60a060405234801561001057600080fd5b50604051620011963803806200119683398181016040528101906100349190610086565b8073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b81525050506100f8565b600081519050610080816100e1565b92915050565b60006020828403121561009857600080fd5b60006100a684828501610071565b91505092915050565b60006100ba826100c1565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6100ea816100af565b81146100f557600080fd5b50565b60805160601c6110686200012e6000398060d852806101dd52806102ca52806103cf52806104ac52806104ec52506110686000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80634ce4dca5146100465780639d0b14c514610076578063c31c9c07146100a6575b600080fd5b610060600480360381019061005b91906109f7565b6100c4565b60405161006d9190610d82565b60405180910390f35b610090600480360381019061008b9190610a46565b6102b6565b60405161009d9190610d82565b60405180910390f35b6100ae6104ea565b6040516100bb9190610d07565b60405180910390f35b60006100d28333308761050e565b6100fd837f000000000000000000000000000000000000000000000000000000000000000086610648565b6060600267ffffffffffffffff8111801561011757600080fd5b506040519080825280602002602001820160405280156101465781602001602082028036833780820191505090505b509050838160008151811061015757fe5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050828160018151811061019f57fe5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505060607f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166338ed17398760008533426040518663ffffffff1660e01b815260040161023d959493929190610d9d565b600060405180830381600087803b15801561025757600080fd5b505af115801561026b573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610294919061098d565b9050806000815181106102a357fe5b6020026020010151925050509392505050565b60006102c48333308761050e565b6102ef837f000000000000000000000000000000000000000000000000000000000000000086610648565b6060600267ffffffffffffffff8111801561030957600080fd5b506040519080825280602002602001820160405280156103385781602001602082028036833780820191505090505b509050838160008151811061034957fe5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050828160018151811061039157fe5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505060607f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16638803dbee88888533426040518663ffffffff1660e01b815260040161042e959493929190610df7565b600060405180830381600087803b15801561044857600080fd5b505af115801561045c573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610485919061098d565b90508060008151811061049457fe5b60200260200101519250858310156104e0576104d2857f00000000000000000000000000000000000000000000000000000000000000006000610648565b6104df853385890361077f565b5b5050949350505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b600060608573ffffffffffffffffffffffffffffffffffffffff166323b872dd86868660405160240161054393929190610ca7565b6040516020818303038152906040529060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516105919190610c90565b6000604051808303816000865af19150503d80600081146105ce576040519150601f19603f3d011682016040523d82523d6000602084013e6105d3565b606091505b509150915081801561060157506000815114806106005750808060200190518101906105ff91906109ce565b5b5b610640576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161063790610d62565b60405180910390fd5b505050505050565b600060608473ffffffffffffffffffffffffffffffffffffffff1663095ea7b3858560405160240161067b929190610cde565b6040516020818303038152906040529060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516106c99190610c90565b6000604051808303816000865af19150503d8060008114610706576040519150601f19603f3d011682016040523d82523d6000602084013e61070b565b606091505b5091509150818015610739575060008151148061073857508080602001905181019061073791906109ce565b5b5b610778576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161076f90610d42565b60405180910390fd5b5050505050565b600060608473ffffffffffffffffffffffffffffffffffffffff1663a9059cbb85856040516024016107b2929190610cde565b6040516020818303038152906040529060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516108009190610c90565b6000604051808303816000865af19150503d806000811461083d576040519150601f19603f3d011682016040523d82523d6000602084013e610842565b606091505b5091509150818015610870575060008151148061086f57508080602001905181019061086e91906109ce565b5b5b6108af576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108a690610d22565b60405180910390fd5b5050505050565b6000813590506108c581610fed565b92915050565b600082601f8301126108dc57600080fd5b81516108ef6108ea82610e7e565b610e51565b9150818183526020840193506020810190508385602084028201111561091457600080fd5b60005b83811015610944578161092a8882610978565b845260208401935060208301925050600181019050610917565b5050505092915050565b60008151905061095d81611004565b92915050565b6000813590506109728161101b565b92915050565b6000815190506109878161101b565b92915050565b60006020828403121561099f57600080fd5b600082015167ffffffffffffffff8111156109b957600080fd5b6109c5848285016108cb565b91505092915050565b6000602082840312156109e057600080fd5b60006109ee8482850161094e565b91505092915050565b600080600060608486031215610a0c57600080fd5b6000610a1a86828701610963565b9350506020610a2b868287016108b6565b9250506040610a3c868287016108b6565b9150509250925092565b60008060008060808587031215610a5c57600080fd5b6000610a6a87828801610963565b9450506020610a7b87828801610963565b9350506040610a8c878288016108b6565b9250506060610a9d878288016108b6565b91505092959194509250565b6000610ab58383610ad0565b60208301905092915050565b610aca81610f4e565b82525050565b610ad981610f06565b82525050565b610ae881610f06565b82525050565b6000610af982610eb6565b610b038185610ed9565b9350610b0e83610ea6565b8060005b83811015610b3f578151610b268882610aa9565b9750610b3183610ecc565b925050600181019050610b12565b5085935050505092915050565b6000610b5782610ec1565b610b618185610eea565b9350610b71818560208601610fba565b80840191505092915050565b610b8681610f60565b82525050565b610b9581610f84565b82525050565b6000610ba8601f83610ef5565b91507f5472616e7366657248656c7065723a205452414e534645525f4641494c4544006000830152602082019050919050565b6000610be8601e83610ef5565b91507f5472616e7366657248656c7065723a20415050524f56455f4641494c454400006000830152602082019050919050565b6000610c28602483610ef5565b91507f5472616e7366657248656c7065723a205452414e534645525f46524f4d5f464160008301527f494c4544000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b610c8a81610f44565b82525050565b6000610c9c8284610b4c565b915081905092915050565b6000606082019050610cbc6000830186610adf565b610cc96020830185610adf565b610cd66040830184610c81565b949350505050565b6000604082019050610cf36000830185610adf565b610d006020830184610c81565b9392505050565b6000602082019050610d1c6000830184610b7d565b92915050565b60006020820190508181036000830152610d3b81610b9b565b9050919050565b60006020820190508181036000830152610d5b81610bdb565b9050919050565b60006020820190508181036000830152610d7b81610c1b565b9050919050565b6000602082019050610d976000830184610c81565b92915050565b600060a082019050610db26000830188610c81565b610dbf6020830187610b8c565b8181036040830152610dd18186610aee565b9050610de06060830185610ac1565b610ded6080830184610c81565b9695505050505050565b600060a082019050610e0c6000830188610c81565b610e196020830187610c81565b8181036040830152610e2b8186610aee565b9050610e3a6060830185610ac1565b610e476080830184610c81565b9695505050505050565b6000604051905081810181811067ffffffffffffffff82111715610e7457600080fd5b8060405250919050565b600067ffffffffffffffff821115610e9557600080fd5b602082029050602081019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b6000610f1182610f24565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000610f5982610f96565b9050919050565b6000610f6b82610f72565b9050919050565b6000610f7d82610f24565b9050919050565b6000610f8f82610f44565b9050919050565b6000610fa182610fa8565b9050919050565b6000610fb382610f24565b9050919050565b60005b83811015610fd8578082015181840152602081019050610fbd565b83811115610fe7576000848401525b50505050565b610ff681610f06565b811461100157600080fd5b50565b61100d81610f18565b811461101857600080fd5b50565b61102481610f44565b811461102f57600080fd5b5056fea2646970667358221220bf97201fa784149f78183769c5dabf8f3c8ba9d844e3167e2c0327fa61f8011e64736f6c634300060c0033";

type V2SwapConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: V2SwapConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class V2Swap__factory extends ContractFactory {
  constructor(...args: V2SwapConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "V2Swap";
  }

  deploy(
    router: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<V2Swap> {
    return super.deploy(router, overrides || {}) as Promise<V2Swap>;
  }
  getDeployTransaction(
    router: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(router, overrides || {});
  }
  attach(address: string): V2Swap {
    return super.attach(address) as V2Swap;
  }
  connect(signer: Signer): V2Swap__factory {
    return super.connect(signer) as V2Swap__factory;
  }
  static readonly contractName: "V2Swap";
  public readonly contractName: "V2Swap";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): V2SwapInterface {
    return new utils.Interface(_abi) as V2SwapInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): V2Swap {
    return new Contract(address, _abi, signerOrProvider) as V2Swap;
  }
}
